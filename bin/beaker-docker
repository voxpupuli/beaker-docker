#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems' unless defined?(Gem)
require 'beaker'
require "beaker/hypervisor/docker"

def build(hostspec)
  ENV['BEAKER_HYPERVISOR'] = 'docker'
  options = Beaker::Options::Parser.new.parse_args(['--hosts', hostspec])
  logger = Beaker::Logger.new(options)

  # add additional paths to the LOAD_PATH
  options[:load_path].each do |path|
    $LOAD_PATH << File.expand_path(path)
  end
  options[:helper].each do |helper|
    require File.expand_path(helper)
  end

  # Simplified version of Beaker::NetworkManager
  hostless_options = Beaker::Options::OptionsHash.new.merge(options.select { |k, _v| !k.to_s.include?('HOSTS') })

  hosts = options['HOSTS'].map do |name, host_hash|
    Beaker::Host.create(name, host_hash, hostless_options)
  end

  hypervisor = Beaker::Docker.new(hosts, options)
  logger.notify 'Provisioning docker'

  hosts.map do |host|
    logger.notify "building #{host.name}"
    image = hypervisor.get_container_image(host)

    if host['tag']
      hypervisor.tag_contaner_image(image, host['tag'])
    else
      logger.notify "Built #{host.name} with #{image.id}"
    end
  end
end

def dockerfile(hostspec, filename)
  ENV['BEAKER_HYPERVISOR'] = 'docker'
  options = Beaker::Options::Parser.new.parse_args(['--hosts', hostspec])
  logger = Beaker::Logger.new(options)

  # add additional paths to the LOAD_PATH
  options[:load_path].each do |path|
    $LOAD_PATH << File.expand_path(path)
  end
  options[:helper].each do |helper|
    require File.expand_path(helper)
  end

  # Simplified version of Beaker::NetworkManager
  hostless_options = Beaker::Options::OptionsHash.new.merge(options.select { |k, _v| !k.to_s.include?('HOSTS') })

  hosts = options['HOSTS'].map do |name, host_hash|
    Beaker::Host.create(name, host_hash, hostless_options)
  end

  if hosts.size != 1
    logger.error "Found #{hosts.size} hosts, expected 1"
    exit(1)
  end

  hypervisor = Beaker::Docker.new(hosts, options)
  # TODO: private method
  File.write(filename, hypervisor.send(:dockerfile_for, hosts.first))
end

VERSION_STRING = <<'VER'
                                 _ .--.
                                ( `    )
        beaker-docker         .-'      `--,
                  _..----.. (             )`-.
                .'_|` _|` _|(  .__,           )
               /_|  _|  _|  _(        (_,  .-'
              ;|  _|  _|  _|  '-'__,--'`--'
              | _|  _|  _|  _| |
          _   ||  _|  _|  _|  _| %s
        _( `--.\_|  _|  _|  _|/
     .-'       )--,|  _|  _|.`
    (__, (_      ) )_|  _| /
      `-.__.\ _,--'\|__|__/
                    ;____;
                     \YT/
                      ||
                     |""|
                     '=='
VER

case ARGV[0]
when 'build'
  build(ARGV[1])
when 'containerfile', 'dockerfile'
  dockerfile(ARGV[1], ARGV[2] || 'Containerfile')
else
  puts VERSION_STRING % BeakerDocker::VERSION
end

exit 0
